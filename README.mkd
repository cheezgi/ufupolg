# Ufupolg programming language

*This is kind of an esoteric programming language.
The goal is to be as ugly as possible.*

## There is no god

Ufupolg stands for "ugly functional/f\*cking programming language".
As stated above, the purpose of this language is to be unpleasant to use.
I think that you will find that it achieves this purpose very easily.

### Simple stuff

#### Expressions

Expressions are a very simle concept. In a nested set of expressions, the
innermost are evaluated before the outermost, eventually working its way
out to the final value of the expression.

```
pr[2 + [3 - [6 - 2]]];
```

`1`

#### Comments

Comments are pretty self-explanatory and explanatory:

`=+ This is a comment, and they are between these symbols. +=`

#### Text literals

One of the most useful parts of a programming language.

`&This a string, encapsulated between ampersands.&`

#### Variables

Always mutable, possible static types may be added later.

`"spaces are allowed" : 3;`

`"in variable names" : &Hello, world!&;`

### Control flow

Control flow is another important feature in programming, but some are
greater than others. `goto` is an abomination, `for` is a godsend. There are
several different ways to implement control flow:

#### Functions

```
"say hello to everyone" :=: :
    pr[&Hello, world!&];
    pr[&This is an example function.&];
|

"say hello to everyone" . ;

"function" :=: "arg1" "arg2" :
    re["arg1" + "arg2"];
|

"result" : "function" . 2 3;
```

The syntax of a funtion is as follows:

```
"function name (spaces allowed)" :=: "arguments" :
    =+ body +=
    re["arguments"];
| =+ end funtion +=
```

To call this function, use the `.` operator:

```
"f" :=: : pr[&Hello, world!&]; |
"f" . ;
```

#### If

```
"f" :=: : pr[&one and two are equal&]; |
"z" :=: :  pr[&one and two are not equal&]; |
"one" : 1;
"two" : 1;
{ [["one"]=["two"]]
    [
        "f" . ;
    ][
        "z" . ;
    ]
}
```

Put simply, the syntax of an if statement is like so in pseudocode:

`{[if this expression is true][do this][optional: otherwise, do this]}`

Truthiness and falsiness is relatively simple:

| True | False |
| ---- | ----- |
| !0   | 0     |
| true | false |
| !&&  | &&    |

This allows for blocks to be put inside the `do` part:

```
"celebration" :=: : pr[&Hey, nice one!&]; |
"loser" :=: "realnum" : pr[&Wow, what a loser. It was actually #"realnum"#&]; |
pr[&Guess the number!&];
"number" : 4; =+ Guaranteed random dice roll +=
"input" : in;
{ [["input"]["number"]]
    [
        "loser" . "number";
    ][
        "celebration" . ;
    ]
}
```

Note the use of interpolation using `#`: the syntax of this may change, or may
be replaced with a concatenation operator.

#### Loops

```
3_[pr[&Three times&]]

"bool" : true;
"count" : 0;
"bool"_[
    "count" : "count" + 1;
    pr["count"];
    { [["count"]=[10]]
        [
            "bool" : false;
        ]
    }
]

```

Loops are represented using the `_` operator. It loops the right expresson
by the left expression amount of times. In the examples above, we have a
simple loop where the expression is repeated only three times. In the second
example, we have a `while` loop, that is, it repeats as long as `"bool"` is
`true`.

### "ew"

If you haven't said that yet, you're probably a perl programmer. I pity your eyes.

## Style

As you can see, this is one *ugly* programming language. There is no style, in fact,
ugly code is celebrated.

```
=+ right-justified fibonacci sequence +=
 "fibonacci" :=: "num" :
            "a" : 0;
            "b" : 1;
          "tmp" : 0;
             "num"_[
    "tmp" : "b";
"b" : "a" + "b";
    "a" : "tmp";
        pr["a"];
                   ]
                       |
"fibonacci" . in
```
